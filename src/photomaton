#!/usr/bin/env python3
# -*- coding:utf-8 -*-
'''!Fichier main
'''
import sys
import os
import time
import io
import configparser
import pygame
import cups
#raspi imports
import gpio4
import picamera
#Custom imports
import logger
import render

JOYBUTTONA = 1
JOYBUTTONB = 2
JOYBUTTONUP = 10
JOYBUTTONDOWN = 11
JOYBUTTONLEFT = 12
JOYBUTTONRIGHT = 13
JOYBUTTONSELECT = 8
JOYBUTTONSTART = 9

PRINTER_STATE_IDLE = 3

CURRDIR = os.path.abspath(os.path.dirname(__file__))


class PhotomatonException(Exception):
    '''
    Raise a photomaton exception
    '''
    def __init__(self, message, errors):
        super(PhotomatonException, self).__init__(message)
        self.errors = errors

class Photomaton:
    '''!Classe du menu photomaton
    '''
    def __init__(self):
        '''!Initialisation
        '''
        os.environ['DISPLAY'] = ':0.0'
        pygame.init()
        self.flash = True
        self.refreshconf()
        ##La webcam: PiCamera class
        self.gpio = gpio4.GPIO()
        self.gpio.setmode(gpio4.constants.BOARD_NANO_PI)
        self.gpio.setup(pin=[self.gpioport,], state=gpio4.GPIO.OUT, initial=gpio4.GPIO.HIGH)
        pygameinfo = pygame.display.Info()
        size = (pygameinfo.current_w, pygameinfo.current_h)
        ##Largeur de l'écran
        self.width = pygameinfo.current_w
        ##Hauteur de l'écran
        self.height = pygameinfo.current_h
        ##Surface pygame
        self.screen = pygame.display.set_mode(size, pygame.FULLSCREEN)
        pygame.mouse.set_visible(False)
        ##Nombre de photos à prendre. Attention à vérifier que Assemble gère ce nombre de photos
        self.nbphotos = 6
        self.check_erreurs(check_cam=True)
        #init printer
        conn = cups.Connection()
        conn.cancelAllJobs(self.printername)
        conn.enablePrinter(self.printername)
        self.camera = picamera.PiCamera()
        pygame.joystick.Joystick(0).init()
        self.run()

    def refreshconf(self):
        '''
        Refresh the conf from config file
        '''
        self.conf = configparser.ConfigParser()
        self.conf.read(os.path.join(CURRDIR, 'photomaton.conf'))
        self.sleeptime = int(self.conf.get('MENU', 'sleeptime'))
        self.printtime = int(self.conf.get('MENU', 'printtime'))
        self.gpioport = int(self.conf.get('MENU', 'gpioport'))
        self.flash = int(self.conf.get('MENU', 'flash'))
        ftcolor = self.conf.get('MENU', 'fontcolor')
        self.fontcolor = (int(ftcolor[:2], 16), int(ftcolor[2:4], 16), int(ftcolor[4:6], 16))
        ##Taille de la police
        self.fontsize = int(self.conf.get('MENU', 'fontsize'))
        ##Choix de la police
        self.font = pygame.font.Font(os.path.join(CURRDIR,
                                                  self.conf.get('MENU', 'font')),
                                     self.fontsize)
        self.destdir = self.conf.get('RENDU', 'destdir')
        self.temppath = self.conf.get('CONF', 'temppath')
        self.testmode = int(self.conf.get('DEV', 'testmode'))
        ##Imprimante
        self.printername = self.conf.get('CONF', 'printername')

    def prendre_photo(self, highres=True, flash=True):
        '''! Prendre une photo en raw via la webcam raspberry V1.2
        @param highres shoot en 2592x1944 si vrai, 640x480 sinon
        @param flash Alume le flash au moment de la photo
        @return Pygame image data
        '''
        if flash:
            self.flash_on()
        image = io.BytesIO()
        time1 = time.time()
        if highres:
            self.camera.resolution = (2592, 1944)
            self.camera.capture(image, format='rgba', use_video_port=False)
            resolution = (2592, 1952)#FIXME: Resolution trick!! C'est hyper crade, pas trouvé mieux.
        else:
            self.camera.resolution = (640, 480)
            self.camera.capture(image, format='rgba', use_video_port=True)
            resolution = (640, 480)
        img = pygame.image.fromstring(image.getvalue(), resolution, 'RGBA').convert()
        if highres and img.get_at((10, 10))[:3] == (0, 0, 0):
            #FIXME: Bug de la picam 1.2. Elle renvoie une image noire. Dans ce cas, on reprends
            print('image noire, on reprends...')
            img = self.prendre_photo(highres, flash)
        self.flash_off()
        if highres:
            print('photo prise en', time.time() - time1, 'secondes')
        return img

    def flash_on(self):
        '''!Allumer les spots
        '''
        print('flash ON')
        self.gpio.output(self.gpioport, gpio4.GPIO.LOW)

    def flash_off(self):
        '''!Eteindre les spots
        '''
        print('flash OFF')
        self.gpio.output(self.gpioport, gpio4.GPIO.HIGH)

    def check_erreurs(self, check_cam=False):
        '''!Vérifier que tout fonctionne. Bloque jusqu'à ce que tout soit OK
        '''
        while not self._check_erreurs(check_cam):
            time.sleep(1)

    @staticmethod
    def _get_image_path(imagename):
        imgdir = os.path.join(CURRDIR, 'images')
        return os.path.join(imgdir, imagename)

    def _check_erreurs(self, check_cam=False):
        logger.logger.logStatus(internalerror='')
        if check_cam:
            try:
                cam = picamera.PiCamera()
                cam.close()
            except picamera.exc.PiCameraError:
                self.showtext(u'Erreur: Webcam absente!', color=(255, 0, 0), fill=True, flip=False)
                img = pygame.image.load(self._get_image_path('ErrorWebcam.png')).convert_alpha()
                self.screen.blit(img, (self.screen.get_width() - img.get_width() - 10, 10))
                pygame.display.flip()
                logger.logger.logEvent(logger.LOG_ERROR, 'Webcam absente')
                return False
        if pygame.joystick.get_count() != 1:
            self.showtext(u'Erreur: Joystick absent!', color=(255, 0, 0), fill=True, flip=False)
            img = pygame.image.load(self._get_image_path('ErrorManette.png')).convert_alpha()
            self.screen.blit(img, (self.screen.get_width() - img.get_width() - 10, 10))
            pygame.display.flip()
            logger.logger.logEvent(logger.LOG_ERROR, 'Joystick absent')
            return False
        if (os.statvfs(self.destdir).f_bavail * os.statvfs(self.destdir).f_frsize)/1024 < 4000:
            self.showtext(u'Erreur: Espace disque insuffisant!',
                          color=(255, 0, 0),
                          fill=True,
                          flip=False)
            img = pygame.image.load(self._get_image_path('ErrorDisk.png')).convert_alpha()
            self.screen.blit(img, (self.screen.get_width() - img.get_width() - 10, 10))
            pygame.display.flip()
            logger.logger.logEvent(logger.LOG_ERROR, 'Espace disque insuffisant')
            return False
        if render.Render().get_ip() == '127.0.0.1':
            self.showtext(u'Erreur: Erreur réseau!', color=(255, 0, 0), fill=True, flip=False)
            img = pygame.image.load(self._get_image_path('ErrorNetwork.png')).convert_alpha()
            self.screen.blit(img, (self.screen.get_width() - img.get_width() - 10, 10))
            pygame.display.flip()
            logger.logger.logEvent(logger.LOG_ERROR, 'Erreur de configuration réseau')
            return False
        try:
            conn = cups.Connection()
            printers = conn.getPrinters()
            if self.printername not in list(printers):
                self.showtext(u'Erreur: Imprimante non connectée!',
                              color=(255, 0, 0),
                              fill=True,
                              flip=False)
                img = pygame.image.load(self._get_image_path('ErrorPrinter.png')).convert_alpha()
                self.screen.blit(img, (self.screen.get_width() - img.get_width() - 10, 10))
                pygame.display.flip()
                logger.logger.logEvent(logger.LOG_ERROR, 'Imprimante non connectée')
                return False
        except RuntimeError as erreur:
            print(erreur)
            self.showtext(u'Erreur: Erreur de connexion au serveur CUPS',
                          color=(255, 0, 0),
                          fill=True,
                          flip=False)
            img = pygame.image.load(self._get_image_path('ErrorPrinter.png')).convert_alpha()
            self.screen.blit(img, (self.screen.get_width() - img.get_width() - 10, 10))
            pygame.display.flip()
            logger.logger.logEvent(logger.LOG_ERROR,
                                   'Impossible de se connecter au serveur d\'impression')
            return False
        conn = cups.Connection()
        if conn.getPrinters()[self.printername]['printer-state'] == 3:
            printerstatus = 'Idle'
        else:
            printerstatus = conn.getPrinters()[self.printername]['printer-state-message'].lower()
        logger.logger.logStatus(printerstatus=printerstatus)
        return True

    def run(self):
        '''!Démarre l'interface graphique
        '''
        pygame.key.set_repeat(35, 65)
        pygame.mouse.set_visible(False)
        pygame.event.set_allowed(None)
        pygame.event.set_allowed([pygame.QUIT, pygame.KEYDOWN, pygame.JOYBUTTONDOWN])
        if self.testmode:
            self.prendre_photos()
        else:
            redraw = True
            while True:
                if redraw:
                    self.camera.close()#avoind picamera bugs
                    self.camera = picamera.PiCamera()
                    self.refreshconf()
                    self.check_erreurs()
                    self.showtext('Appuyer sur A ou B', color=self.fontcolor,
                                  offset=160-self.height/2, fill=True, flip=False)
                    img = pygame.image.load(self._get_image_path('NES.png')).convert_alpha()
                    img = pygame.transform.smoothscale(img, (int(458), int(280)))
                    self.screen.blit(img, (int(self.width/2) - 230, 250))
                    pygame.event.clear()
                    pygame.display.flip()
                    redraw = False
                event = pygame.event.wait()
                if event.type == pygame.QUIT or\
                   (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
                    pygame.quit()
                    logger.logger.logEvent(logger.LOG_INFO, 'Sortie à la demande de l\'utilisateur')
                    sys.exit(0)
                elif event.type == pygame.JOYBUTTONDOWN:
                    if event.button in [JOYBUTTONA, JOYBUTTONB]:
                        self.prendre_photos()
                        redraw = True
                    elif event.button == JOYBUTTONSTART:
                        self.admin_menu()
                        redraw = True
                    else:
                        redraw = False
    @staticmethod
    def _reboot():
        print('Reboot')
        logger.logger.logEvent(logger.LOG_INFO, 'Redémarrage à la demande de l\'utilisateur')
        os.system('sudo reboot')

    def _activer_flash(self):
        print('Flash active')
        self.flash = True

    def _desactiver_flash(self):
        print('Flash inative')
        self.flash = False

    @staticmethod
    def _shutdown():
        print('Shutdown')
        os.system('sudo shutdown -h now')

    @staticmethod
    def _quit():
        print('Quit')
        logger.logger.logEvent(logger.LOG_INFO, 'Sortie à la demande de l\'utilisateur')
        sys.exit(0)

    @staticmethod
    def get_event():
        '''!Récupère un évènement de console NES
        '''
        pygame.event.clear()
        while True:
            if pygame.joystick.Joystick(0).get_axis(0) > 0:
                return JOYBUTTONRIGHT
            if pygame.joystick.Joystick(0).get_axis(0) < 0:
                return JOYBUTTONRIGHT
            if pygame.joystick.Joystick(0).get_axis(1) < 0:
                return JOYBUTTONUP
            if pygame.joystick.Joystick(0).get_axis(1) > 0:
                return JOYBUTTONDOWN
            myevent = pygame.event.poll()
            if myevent != pygame.NOEVENT:
                if myevent.type == pygame.JOYBUTTONDOWN:
                    return myevent.button

    def admin_menu(self):
        '''!Menu d'administration du photomaton. Déclanché par la touche start sur le menu de base
        '''
        if self.flash:
            commands = {u'Redémarrer le photomaton': self._reboot,
                        'Arreter le photomaton': self._shutdown,
                        u'Quitter le programme': self._quit,
                        u'Annuler': None,
                        u'Désactiver le flash': self._desactiver_flash}
        else:
            commands = {u'Redémarrer le photomaton': self._reboot,
                        'Arreter le photomaton': self._shutdown,
                        u'Quitter le programme': self._quit, u'Annuler': None,
                        u'Activer le flash': self._activer_flash}
        arrow = pygame.image.load(self._get_image_path('arrow.png')).convert_alpha()
        arrow = pygame.transform.smoothscale(arrow, (int(arrow.get_width()/5),
                                                     int(arrow.get_height()/5)))
        current = list(commands).index(u'Annuler')
        #Boucle de contrôle
        self.background()
        while True:
            yoffset = 5
            #Affichage des options
            for i in range(len(commands)):
                text = list(commands)[i]
                img = self.font.render(text, 1, (255, 255, 255))
                self.screen.blit(img, (arrow.get_width() + 50, yoffset))
                if i == current:
                    self.screen.blit(arrow,
                                     (10, yoffset +
                                      int(img.get_height() / 2 - arrow.get_height() / 2)))
                yoffset += 20 + img.get_height()
            pygame.display.flip()
            #Traitement des entrées utilisateur
            bouton = self.get_event()
            if bouton in [JOYBUTTONA, JOYBUTTONB]:
                text = list(commands)[current]
                if text == u'Annuler':
                    return
                commands[text]()
                if 'flash' in text:
                    return
            elif bouton == JOYBUTTONUP:
                current -= 1
                self.background()
            elif bouton == JOYBUTTONDOWN:
                current += 1
                self.background()
            current = current % len(commands)

    def background(self):
        '''!Selection du fond d'écran
        '''
        img = pygame.image.load(os.path.join(CURRDIR,
                                             self.conf.get('MENU', 'background'))).convert()
        self.screen.blit(img, (0, 0))

    def prendre_photos(self):
        '''!Prendre une série de "self.nbphotos" photos et demande une impression
        '''
        self.check_erreurs()
        photolist = []
        for photonb in range(0, self.nbphotos):
            time1 = time.time()
            self.background()nbphotos
            pygame.display.flip()
            #Affiche le compte à rebours et l'aperçu
            self.screen.blit(self.font.render('photo {} sur {}'.format(photonb + 1,
                                                                       self.nbphotos),
                                              2, self.fontcolor), (0, 0))
            oldcounter = -1
            while self.sleeptime - int(time.time()-time1) > 0:#EIP
                counter = self.sleeptime - int(time.time()-time1)
                if counter != oldcounter:
                    counterimg = pygame.image.load(self._get_image_path('{}.png'.format(counter))).convert()
                    oldcounter = counter
                preview = self.prendre_photo(highres=False, flash=False)
                self.screen.blit(preview, (int(self.width/2 - preview.get_width()/2),
                                           int(self.height/2 - preview.get_height()/2)))
                self.screen.blit(counterimg, (int(self.width/2 - counterimg.get_width()/2),
                                              int(self.height/2 - counterimg.get_height()/2)))
                pygame.display.flip()
            #Affichage de l'image
            self.screen.fill((255, 255, 255))
            pygame.display.flip()
            img = self.prendre_photo(highres=True, flash=self.flash)
            photolist.append(img)
            img = pygame.transform.smoothscale(img, (self.width, self.height))
            self.screen.blit(img, (0, 0))
            pygame.display.flip()
            time.sleep(2)
        #Pour patienter pendant le traitement de l'image
        self.background()
        img = pygame.image.load(self._get_image_path('coyote_rocket_by_mreiof-d5va4sl.jpg')
                               ).convert_alpha()
        img = pygame.transform.smoothscale(img, (self.screen.get_width(), self.screen.get_height()))
        self.screen.blit(img, (0, 0))
        del img#Memory optimisation
        self.showtext(u'Génération en cours, patientez!!',
                      color=self.fontcolor, fill=False, flip=True, offset=-250, scale=3)
        #Photo rendering. Voir render.py
        generator = render.Render()
        filename = generator.gen(photolist)
        del photolist#Memory optimisation
        del generator#Memory optimisation
        #Ecran d'impression
        self.background()
        img = pygame.image.load(filename).convert()
        img = pygame.transform.smoothscale(img,
                                           (int(img.get_width() *
                                                (float(self.height)/img.get_height())),
                                            self.height))
        self.screen.blit(img, (int(self.screen.get_width() / 2 - img.get_width() / 2), 0))
        self.showtext('Valider pour imprimer', color=self.fontcolor, fill=False, flip=False)
        #Afficher le qrcode à droite
        img = pygame.image.load(os.path.join(self.temppath, 'qrcode.png')).convert()
        img = pygame.transform.smoothscale(img, (300, 300))
        self.screen.blit(img, (self.screen.get_width() - img.get_width() - 20, 10))
        #Images imprimer OUI/NON FLECHE??
        img = pygame.image.load(self._get_image_path('KO.png')).convert_alpha()
        img = pygame.transform.smoothscale(img, (int(self.width/4 - 14), int(self.height/4 + 20)))
        self.screen.blit(img, (0, self.height/2))
        img = pygame.image.load(self._get_image_path('OK.png')).convert_alpha()
        img = pygame.transform.smoothscale(img, (int(self.width/4 - 14), int(self.height/4 + 20)))
        self.screen.blit(img, (self.width - img.get_width(), int(self.height/2)))
        pygame.display.flip()
        #En attente de choix utilisateur
        pygame.event.clear()
        if self.testmode:
            time.sleep(5)
            return
        while True:
            event = pygame.event.wait()
            if event.type == pygame.JOYBUTTONDOWN:
                if event.button == JOYBUTTONA:
                    self.imprimer(filename)
                return

    def checkprinterstatus(self):
        '''!Check la dicponibilité de l'imprimante
        @return True if printer is idle, False if not
        '''
        conn = cups.Connection()
        conn.cancelAllJobs(self.printername)
        conn.enablePrinter(self.printername)
        if conn.getPrinters()[self.printername]['printer-state'] == PRINTER_STATE_IDLE: return True
        printermessage = conn.getPrinters()[self.printername]['printer-state-message'].lower()
        self.showtext(u'Erreur: {}'.format(printermessage),
                      color=(255, 0, 0),
                      fill=True,
                      flip=False)
        self.showtext('Appuyer sur une touche poour continuer sans imprimer',
                      color=self.fontcolor, offset=100, fill=False)
        img = pygame.image.load(self._get_image_path('ErrorPrinter.png')).convert_alpha()
        self.screen.blit(img, (self.screen.get_width() - img.get_width() - 10, 10))
        pygame.display.flip()
        while conn.getPrinters()[self.printername]['printer-state'] != PRINTER_STATE_IDLE:
            if pygame.event.wait().type == pygame.JOYBUTTONDOWN:
                return False
        return True

    def imprimer(self, filename):
        '''!Envoie la photo à l'imprimante. Génère un QRCode.
        @param filename Le fichier à imprimer
        '''
        self.check_erreurs()
        if not self.checkprinterstatus(): return
        logger.logger.logEvent(logger.LOG_INFO, 'Impression')
        logger.logger.logStatus('Impression', 1)
        #impression sauvage
        self.showtext('Impression en cours..', color=self.fontcolor, flip=False, fill=True)
        self.showtext('Télécharger sur WiFi photomaton!',
                      color=self.fontcolor, offset=300, fill=False)
        img = pygame.image.load(os.path.join(self.temppath, 'qrcode.png')).convert()
        img = pygame.transform.smoothscale(img, (300, 300))
        self.screen.blit(img, (10, 10))
        pygame.display.flip()
        print('impression demandée!!')
        conn = cups.Connection()
        conn.printFile(printer=self.printername, filename=filename, title='IMG', options={'StpBorderless': 'True'})
        #temporisation avec barre de chargement
        for i in range(self.printtime * 10, 0, -1):
            #TODO -> cups status guttenprint
            progress = (self.printtime * 10.0 - i)/(self.printtime * 10)
            pygame.draw.rect(self.screen, (255, 0, 0),
                             pygame.Rect(0, 400, int((self.width - 20) * progress), 30))
            pygame.display.flip()
            time.sleep(.1)
        #attente d'action utilisateur
        self.showtext('Appuyer sur une touche...', color=self.fontcolor, offset=200, fill=False)
        pygame.event.clear()
        pygame.event.wait()
        #Vide la file d'impression. Evite les bugs en cas de fin de papier ou remplacement cartouche
        conn.cancelAllJobs(self.printername)
        conn.enablePrinter(self.printername)

    def showtext(self, text, color=(255, 255, 255), fill=True, offset=0, flip=True, scale=1):
        '''!Affiche un texte sur la surface
        @param text Le texte a afficher
        @param color La couleur du texte
        @param fill Ecraser avec le fond d'écran
        @param offset L'offset y par rapport au centre de l'écran
        @param flip Rafraichir l'affichage
        '''
        if fill:
            self.background()
        img = self.font.render(text, int(scale), color)
        coordx = int(self.width / 2 - img.get_width() / 2)
        coordy = int(self.height / 2 - img.get_height() + offset)
        self.screen.blit(img, (coordx, coordy))
        if flip: pygame.display.flip()

if __name__ == '__main__':
    logger.logger.logEvent(logger.LOG_INFO, 'Demarrage du photomaton')
    while True:
        Photomaton()
